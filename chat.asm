INCLUDE lib.inc
		.MODEL SMALL
        .STACK 64

        .DATA
TESTMSG DB "Hello from TESTER!",'$'
CURSOR1_CUR_X DB 0
CURSOR2_CUR_X DB 0
CHAR1   DB  ?
CHAR2   DB  ?


        .CODE
MAIN	PROC	FAR

        MOV	AX,@DATA
        MOV	DS,AX
        CALL CONFIG
        CLRS
        CALL DRWLINECENTER
        SETCURSOR 0,10D
MAIN_LP:
        GETKEY1
        COMPARE_KEY 0DH
        JNZ CHECK_BACKSPACE1_LB
        SCROLLUP1
        MOV CURSOR1_CUR_X,0
        JMP TAKE2
CHECK_BACKSPACE1_LB:
        COMPARE_KEY 08H
        JNZ PRINT_CHAR_1
        CMP CURSOR1_CUR_X, 0
        JZ TAKE2
        DEC CURSOR1_CUR_X
        SETCURSOR CURSOR1_CUR_X,10D
        PRTCHAR 1," ",00
        JMP TAKE2
PRINT_CHAR_1:
        SETCURSOR CURSOR1_CUR_X,10D
        CALL PRTCHAR1
        JMP TAKE2

CURE_JUMP_OUT_OF_RANGE:
        JMP MAIN_LP

TAKE2:
        GETKEY2
        COMPARE_KEY 0DH
        JNZ CHECK_BACKSPACE2_LB
        SCROLLUP2
        MOV CURSOR2_CUR_X,0
        JMP CURE_JUMP_OUT_OF_RANGE
CHECK_BACKSPACE2_LB:
        COMPARE_KEY 08H
        JNZ PRINT_CHAR_2
        CMP CURSOR2_CUR_X, 0
        JZ  CURE_JUMP_OUT_OF_RANGE
        DEC CURSOR2_CUR_X
        SETCURSOR CURSOR2_CUR_X,22D
        PRTCHAR 1," ",00
        JMP CURE_JUMP_OUT_OF_RANGE
PRINT_CHAR_2:
        SETCURSOR CURSOR2_CUR_X,22D
        CALL PRTCHAR2        
        JMP CURE_JUMP_OUT_OF_RANGE
        PAUSE
        HALT
MAIN	ENDP

TAKE_U1_MSG PROC
    RET
TAKE_U1_MSG ENDP

CONFIG PROC
    ; Access the control bit
    MOV DX, 03FBH
    MOV AL,80H
    OUT DX,AL
    ; Set the divisor LSB
    MOV DX,3F8H			
    MOV AL,0CH			
    OUT DX,AL
    ; Set the divisor MSB
    MOV DX,3F9H			
    MOV AL,00H			
    OUT DX,AL
    ; Set port config
    ; d7:Access to Receiver buffer, Transmitter buffer
    ; d6:Set Break disabled
    ; d5d4d3:Even Parity
    ; d2:One Stop Bit
    ; d1d0:8bits
    MOV DX,3FBH
    MOV AL, 00011011B
    OUT DX,AL

CONFIG ENDP

PRTCHAR1 PROC
    PRTCHAR 1,CHAR1,0AH
    GETCURSOR
    INC DL
    CMP DL, 80D
    JNZ INC_CURSOR1_X
    SCROLLUP1
    MOV CURSOR1_CUR_X,0
    JMP END_UPDATE_CURSOR1
INC_CURSOR1_X:
    MOV CURSOR1_CUR_X,DL
END_UPDATE_CURSOR1:
    RET 
PRTCHAR1 ENDP

PRTCHAR2 PROC
    PRTCHAR 1,CHAR2,0BH
    GETCURSOR
    INC DL
    CMP DL, 80D
    JNZ INC_CURSOR2_X
    SCROLLUP2
    MOV CURSOR2_CUR_X,0
    JMP END_UPDATE_CURSOR2
INC_CURSOR2_X:
    MOV CURSOR2_CUR_X,DL
END_UPDATE_CURSOR2:
    RET
PRTCHAR2 ENDP

; UPDATE_CURSOR PROC
;     GETCURSOR
;     INC DL
;     CMP DL, 79D
;     JNZ INC_CURSOR_X
;     SCROLLUP1
;     SCROLLUP2
;     MOV CURSOR_CUR_X,0
;     JMP END_UPDATE_CURSOR
; INC_CURSOR_X:
;     MOV CURSOR_CUR_X,DL
; END_UPDATE_CURSOR:
;     RET 
; UPDATE_CURSOR ENDP

DRWLINECENTER PROC
    SETCURSOR 0,13D
    PRTCHAR 80,"=",0FH
    RET
DRWLINECENTER ENDP
END		MAIN